"""
1. Проверка чётности числа
Описание: Определить, является ли введённое целое число чётным или нечётным.
Примеры:
  Input: "42" → Output: [42, "четное"]
  Input: "7" → Output: [7, "нечетное"]
  Input: "0" → Output: [0, "четное"]
"""
def check_parity():
    pass


"""
2. Сумма цифр числа
Описание: Вычислить сумму цифр целого числа.
Примеры:
  Input: "-123" → Output: 6
  Input: "100" → Output: 1
  Input: "999" → Output: 27
"""
def sum_of_digits():
    pass


"""
3. Конвертер температуры
Описание: Конвертировать температуру из °C в °F или наоборот.
Примеры:
  Input: "36.6C" → Output: [36.6, 97.88]
  Input: "97.9F" → Output: [97.9, 36.61]
  Input: "0C" → Output: [0, 32.0]
"""
def temp_converter():
    pass


"""
4. Проверка палиндрома
Описание: Проверить, является ли строка палиндромом.
Примеры:
  Input: "А роза упала на лапу Азора" → Output: True
  Input: "hello" → Output: False
  Input: "madam" → Output: True
"""
def is_palindrome():
    pass


"""
5. Калькулятор BMI
Описание: Рассчитать индекс массы тела (BMI).
Примеры:
  Input: "70", "1.75" → Output: [22.86, "Норма"]
  Input: "50", "1.80" → Output: [15.43, "Недостаточный вес"]
  Input: "90", "1.70" → Output: [31.14, "Избыточный вес"]
"""
def bmi_calculator():
    pass


"""
6. Калькулятор операций
Описание: Выполнить арифметическую операцию над двумя числами.
Примеры:
  Input: "5", "0", "/" → Output: "Ошибка: деление на ноль"
  Input: "3", "2", "*" → Output: 6
  Input: "10", "4", "-" → Output: 6
"""
def simple_calculator():
    pass


"""
7. Поиск максимума в списке
Описание: Найти максимальное число в списке.
Примеры:
  Input: "3 7 2" → Output: 7
  Input: "-1 -5 -3" → Output: -1
  Input: "0 0 0" → Output: 0
"""
def find_max():
    pass


"""
8. Подсчёт гласных в строке
Описание: Посчитать количество гласных букв в строке.
Примеры:
  Input: "Hello" → Output: 2
  Input: "Python" → Output: 1
  Input: "AEIOU" → Output: 5
"""
def count_vowels():
    pass


"""
9. Инвертирование строки
Описание: Перевернуть строку задом наперёд.
Примеры:
  Input: "Python" → Output: "nohtyP"
  Input: "12345" → Output: "54321"
  Input: "" → Output: ""
"""
def reverse_string():
    pass


"""
10. Генератор случайного пароля
Описание: Сгенерировать пароль из 8 символов.
Примеры:
  Output: "a3B9fR2k"
  Output: "Xy7!pL4q"
  Output: "kP8*zN3m"
"""
def generate_password():
    pass


"""
11. Проверка на простоту числа
Описание: Определить, является ли число простым.
Примеры:
  Input: "17" → Output: True
  Input: "4" → Output: False
  Input: "1" → Output: False
"""
def is_prime():
    pass


"""
12. Частота символов в строке
Описание: Подсчитать частоту символов в строке.
Примеры:
  Input: "hello" → Output: {'h':1, 'e':1, 'l':2, 'o':1}
  Input: "aabbb" → Output: {'a':2, 'b':3}
  Input: "" → Output: {}
"""
def char_frequency():
    pass


"""
13. Удаление дубликатов из списка
Описание: Вернуть список без повторяющихся элементов.
Примеры:
  Input: "1 2 2 3" → Output: [1, 2, 3]
  Input: "a a b b" → Output: ['a', 'b']
  Input: "5" → Output: [5]
"""
def remove_duplicates():
    pass


"""
14. Сортировка списка строк по длине
Описание: Отсортировать строки по возрастанию длины.
Примеры:
  Input: "яблоко, киви, груша" → Output: ["киви", "груша", "яблоко"]
  Input: "aa, bbb, c" → Output: ["c", "aa", "bbb"]
  Input: "longest, short" → Output: ["short", "longest"]
"""
def sort_by_length():
    pass


"""
15. Объединение двух словарей
Описание: Объединить два словаря в один.
Примеры:
  Input: {"a":1}, {"b":2} → Output: {"a":1, "b":2}
  Input: {"x":10}, {"x":20} → Output: {"x":20}
  Input: {}, {"k":"v"} → Output: {"k":"v"}
"""
def merge_dicts():
    pass


"""
16. Поиск общих элементов в списках
Описание: Найти пересечение двух списков.
Примеры:
  Input: "1 2 3", "2 3 4" → Output: [2, 3]
  Input: "a b", "b c d" → Output: ['b']
  Input: "1", "2" → Output: []
"""
def find_common():
    pass


"""
17. Разница между списками
Описание: Найти элементы, которые есть только в одном из списков.
Примеры:
  Input: "1 2 3", "2 3 4" → Output: [1, 4]
  Input: "a b c", "c d e" → Output: ['a', 'b', 'd', 'e']
  Input: "1", "1" → Output: []
"""
def list_difference():
    pass


"""
18. Факториал числа
Описание: Вычислить факториал числа N.
Примеры:
  Input: "5" → Output: 120
  Input: "0" → Output: 1
  Input: "3" → Output: 6
"""
def factorial():
    pass


"""
19. Таблица умножения
Описание: Вывести таблицу умножения для числа N.
Примеры:
  Input: "3" → Output: ["3 x 1 = 3", ..., "3 x 10 = 30"]
  Input: "1" → Output: ["1 x 1 = 1", ..., "1 x 10 = 10"]
  Input: "0" → Output: ["0 x 1 = 0", ..., "0 x 10 = 0"]
"""
def multiplication_table():
    pass


"""
20. Подсчёт слов в строке
Описание: Посчитать количество каждого слова в строке.
Примеры:
  Input: "hello world hello" → Output: {"hello":2, "world":1}
  Input: "a b a c b" → Output: {"a":2, "b":2, "c":1}
  Input: "" → Output: {}
"""
def word_count():
    pass


"""
21. Генератор списка квадратов
Описание: Создать список квадратов чисел от 1 до N.
Примеры:
  Input: "3" → Output: [1, 4, 9]
  Input: "1" → Output: [1]
  Input: "5" → Output: [1, 4, 9, 16, 25]
"""
def squares_list():
    pass


"""
22. Фильтрация списка по условию
Описание: Отфильтровать список, оставив только чётные числа.
Примеры:
  Input: "1 2 3 4" → Output: [2, 4]
  Input: "0" → Output: [0]
  Input: "1 3 5" → Output: []
"""
def filter_even():
    pass


"""
23. Поиск минимального значения в словаре
Описание: Найти ключ с минимальным значением.
Примеры:
  Input: {"a":3, "b":1} → Output: "b"
  Input: {"x":0, "y":-1} → Output: "y"
  Input: {"k1":10, "k2":10} → Output: "k1"
"""
def min_dict_key():
    pass


"""
24. Замена подстроки
Описание: Заменить все вхождения подстроки в строке.
Примеры:
  Input: "hello world", "world", "Python" → Output: "hello Python"
  Input: "aabbcc", "bb", "xx" → Output: "aaxxcc"
  Input: "test", "x", "y" → Output: "test"
"""
def replace_substring():
    pass


"""
25. Проверка аннаграммы
Описание: Определить, являются ли две строки аннаграммами.
Примеры:
  Input: "listen", "silent" → Output: True
  Input: "hello", "world" → Output: False
  Input: "anagram", "nagaram" → Output: True
"""
def is_anagram():
    pass


"""
26. Генератор простых чисел
Описание: Сгенерировать все простые числа до N.
Примеры:
  Ввод: "10" → Вывод: [2, 3, 5, 7]
  Ввод: "2" → Вывод: [2]
  Ввод: "20" → Вывод: [2, 3, 5, 7, 11, 13, 17, 19]
"""
def generate_primes():
    pass


"""
27. Выравнивание списка
Описание: Преобразовать вложенный список (1 уровень вложенности) в плоский.
Примеры:
  Ввод: [[1,2], [3,4]] → Вывод: [1, 2, 3, 4]
  Ввод: [[], ["a"]] → Вывод: ["a"]
  Ввод: [[1], [2], [3]] → Вывод: [1, 2, 3]
"""
def flatten_list():
    pass


"""
28. Заглавные буквы в словах
Описание: Сделать первую букву каждого слова заглавной.
Примеры:
  Ввод: "hello world" → Вывод: "Hello World"
  Ввод: "python is great" → Вывод: "Python Is Great"
  Ввод: "" → Вывод: ""
"""
def capitalize_words():
    pass


"""
29. Сумма значений словаря
Описание: Просуммировать все числовые значения в словаре.
Примеры:
  Ввод: {"a":1, "b":2} → Вывод: 3
  Ввод: {"x":10, "y":-5} → Вывод: 5
  Ввод: {"k":"v"} → Вывод: 0
"""
def sum_dict_values():
    pass


"""
30. Зигзагообразная строка
Описание: Преобразовать строку в зигзагообразный вид (3 строки).
Примеры:
  Ввод: "PYTHON", 3 → Вывод: "P H\nY T\nN O"
  Ввод: "ABCD", 2 → Вывод: "A C\nB D"
  Ввод: "A", 1 → Вывод: "A"
"""
def zigzag_string():
    pass


"""
31. Сбалансированные скобки
Описание: Проверить, правильно ли расставлены скобки в строке.
Примеры:
  Ввод: "(()())" → Вывод: True
  Ввод: "())(" → Вывод: False
  Ввод: "" → Вывод: True
"""
def balanced_parentheses():
    pass


"""
32. Разделение списка на части
Описание: Разбить список на части размером N.
Примеры:
  Ввод: [1,2,3,4], 2 → Вывод: [[1,2], [3,4]]
  Ввод: ["a","b","c"], 1 → Вывод: [["a"], ["b"], ["c"]]
  Ввод: [], 3 → Вывод: []
"""
def chunk_list():
    pass


"""
33. Римские цифры в число
Описание: Преобразовать римские цифры (диапазон I-X) в целое число.
Примеры:
  Ввод: "V" → Вывод: 5
  Ввод: "IX" → Вывод: 9
  Ввод: "III" → Вывод: 3
"""
def roman_to_int():
    pass


"""
34. Проверка совершенного числа
Описание: Проверить, является ли число совершенным (сумма делителей равна числу).
Примеры:
  Ввод: "6" → Вывод: True (1+2+3=6)
  Ввод: "28" → Вывод: True
  Ввод: "5" → Вывод: False
"""
def is_perfect_number():
    pass


"""
35. Проверка циклического сдвига строки
Описание: Проверить, является ли одна строку циклическим сдвигом другой.
Примеры:
  Ввод: "abcd", "cdab" → Вывод: True
  Ввод: "hello", "ohell" → Вывод: True
  Ввод: "python", "thonpy" → Вывод: False
"""
def is_rotation():
    pass


"""
36. Пересечение нескольких списков
Описание: Найти общие элементы в нескольких списках.
Примеры:
  Ввод: [[1,2,3], [2,3,4], [3,4,5]] → Вывод: [3]
  Ввод: [["a","b"], ["b","c"], ["b","d"]] → Вывод: ["b"]
  Ввод: [[1], [2], [3]] → Вывод: []
"""
def multi_list_intersection():
    pass


"""
37. Счетчик символов
Описание: Подсчитать цифры, буквы и специальные символы в строке.
Примеры:
  Ввод: "Py3.8" → Вывод: {"digits":2, "letters":2, "special":1}
  Ввод: "123" → Вывод: {"digits":3, "letters":0, "special":0}
  Ввод: "@#$" → Вывод: {"digits":0, "letters":0, "special":3}
"""
def count_chars():
    pass


"""
38. Симметричная разница нескольких списков
Описание: Найти элементы, присутствующие только в одном из нескольких списков.
Примеры:
  Ввод: [[1,2,3], [2,3,4]] → Вывод: [1,4]
  Ввод: [["a","b"], ["b","c"], ["a","c"]] → Вывод: []
  Ввод: [[1], [2], [3]] → Вывод: [1,2,3]
"""
def multi_list_symmetric_diff():
    pass


"""
39. Кодирование повторов
Описание: Реализовать базовое сжатие строки (RLE).
Примеры:
  Ввод: "aaabbc" → Вывод: "3a2b1c"
  Ввод: "abcd" → Вывод: "1a1b1c1d"
  Ввод: "" → Вывод: ""
"""
def run_length_encode():
    pass


"""
40. Транспонирование матрицы
Описание: Транспонировать двумерный список (матрицу).
Примеры:
  Ввод: [[1,2], [3,4]] → Вывод: [[1,3], [2,4]]
  Ввод: [["a","b"]] → Вывод: [["a"], ["b"]]
  Ввод: [] → Вывод: []
"""
def transpose_matrix():
    pass


"""
41. Проверка панграммы
Описание: Проверить, содержит ли строка все буквы английского алфавита.
Примеры:
  Ввод: "The quick brown fox jumps over the lazy dog" → Вывод: True
  Ввод: "Python" → Вывод: False
  Ввод: "" → Вывод: False
"""
def is_pangram():
    pass


"""
42. Список в словарь
Описание: Преобразовать список в словарь с индексами в качестве ключей.
Примеры:
  Ввод: ["a","b","c"] → Вывод: {0:"a", 1:"b", 2:"c"}
  Ввод: [] → Вывод: {}
  Ввод: [10] → Вывод: {0:10}
"""
def list_to_dict():
    pass


"""
43. Реверс слов в строке
Описание: Перевернуть каждое слово в строке, сохранив пробелы.
Примеры:
  Ввод: "Hello world" → Вывод: "olleH dlrow"
  Ввод: "Python is fun" → Вывод: "nohtyP si nuf"
  Ввод: "" → Вывод: ""
"""
def reverse_words():
    pass


"""
44. Последовательность Фибоначчи
Описание: Сгенерировать последовательность Фибоначчи до N элементов.
Примеры:
  Ввод: "5" → Вывод: [0,1,1,2,3]
  Ввод: "1" → Вывод: [0]
  Ввод: "8" → Вывод: [0,1,1,2,3,5,8,13]
"""
def fibonacci_sequence():
    pass


"""
45. Обмен ключей и значений
Описание: Поменять местами ключи и значения в словаре.
Примеры:
  Ввод: {"a":1, "b":2} → Вывод: {1:"a", 2:"b"}
  Ввод: {"x":"y"} → Вывод: {"y":"x"}
  Ввод: {} → Вывод: {}
"""
def swap_dict():
    pass


"""
46. Дублирование элементов списка
Описание: Дублировать каждый элемент списка.
Примеры:
  Ввод: [1,2,3] → Вывод: [1,1,2,2,3,3]
  Ввод: ["a"] → Вывод: ["a","a"]
  Ввод: [] → Вывод: []
"""
def duplicate_elements():
    pass


"""
47. Позиции букв в алфавите
Описание: Заменить каждую букву на её позицию в алфавите.
Примеры:
  Ввод: "abc" → Вывод: "1 2 3"
  Ввод: "Python" → Вывод: "16 25 20 8 15 14"
  Ввод: "" → Вывод: ""
"""
def alphabet_position():
    pass


"""
48. Уникальные комбинации
Описание: Сгенерировать все уникальные комбинации из 2 элементов списка.
Примеры:
  Ввод: [1,2,3] → Вывод: [(1,2), (1,3), (2,3)]
  Ввод: ["a"] → Вывод: []
  Ввод: [] → Вывод: []
"""
def unique_combinations():
    pass


"""
49. Число прописью
Описание: Преобразовать цифры (0-9) в соответствующие слова на английском.
Примеры:
  Ввод: "3" → Вывод: "three"
  Ввод: "0" → Вывод: "zero"
  Ввод: "9" → Вывод: "nine"
"""
def number_to_words():
    pass


"""
50. Сумма вложенного словаря
Описание: Просуммировать все целые числа во вложенном словаре.
Примеры:
  Ввод: {"a":1, "b":{"c":2}} → Вывод: 3
  Ввод: {"x":{"y":{"z":10}}} → Вывод: 10
  Ввод: {} → Вывод: 0
"""
def nested_dict_sum():
    pass


"""
51. Валидация e-mail
Описание: Проверить, является ли строка валидным e-mail адресом (упрощенная проверка).
Примеры:
  Ввод: "user@example.com" → Вывод: True
  Ввод: "invalid.email" → Вывод: False
  Ввод: "another@domain.ru" → Вывод: True
"""
def validate_email():
    pass


"""
52. Генератор случайных паролей с условиями
Описание: Сгенерировать пароль длиной N (минимум 1 цифра, 1 заглавная буква).
Примеры:
  Ввод: 8 → Вывод: "P4ssw0rd"
  Ввод: 5 → Вывод: "A1b2C"
  Ввод: 3 → Вывод: "X1y"
"""
def generate_strong_password():
    pass


"""
53. Разница дат
Описание: Вычислить разницу в днях между двумя датами (строками в формате DD.MM.YYYY).
Примеры:
  Ввод: "01.01.2023", "10.01.2023" → Вывод: 9
  Ввод: "01.01.2023", "01.01.2024" → Вывод: 365
  Ввод: "01.06.2023", "01.06.2023" → Вывод: 0
"""
def date_difference():
    pass


"""
54. Калькулятор времени
Описание: Сложить или вычесть временные интервалы (формат HH:MM:SS).
Примеры:
  Ввод: "01:30:00", "+", "00:45:00" → Вывод: "02:15:00"
  Ввод: "23:59:59", "+", "00:00:01" → Вывод: "00:00:00"
  Ввод: "10:00:00", "-", "01:30:00" → Вывод: "08:30:00"
"""
def time_calculator():
    pass


"""
55. Частотный анализ текста
Описание: Вернуть N самых частых слов в тексте (регистронезависимо).
Примеры:
  Ввод: "Hello world hello", 1 → Вывод: {"hello":2}
  Ввод: "A B A C B D", 2 → Вывод: {"a":2, "b":2}
  Ввод: "Python is great", 3 → Вывод: {"python":1, "is":1, "great":1}
"""
def word_frequency():
    pass


"""
56. Шифр Цезаря
Описание: Зашифровать/расшифровать строку сдвигом на N букв.
Примеры:
  Ввод: "abc", 1 → Вывод: "bcd"
  Ввод: "xyz", 2 → Вывод: "zab"
  Ввод: "Python", 5 → Вывод: "Udymts"
"""
def caesar_cipher():
    pass


"""
57. Валидатор IP-адреса
Описание: Проверить, является ли строка валидным IPv4 адресом.
Примеры:
  Ввод: "192.168.1.1" → Вывод: True
  Ввод: "256.0.0.1" → Вывод: False
  Ввод: "127.0.0.1" → Вывод: True
"""
def validate_ip():
    pass


"""
58. Генератор CSV
Описание: Преобразовать список словарей в CSV строку.
Примеры:
  Ввод: [{"name":"John","age":30}, {"name":"Jane","age":25}] → Вывод: "name,age\nJohn,30\nJane,25"
  Ввод: [{"id":1}] → Вывод: "id\n1"
  Ввод: [] → Вывод: ""
"""
def dicts_to_csv():
    pass


"""
59. Парсер CSV
Описание: Преобразовать CSV строку в список словарей.
Примеры:
  Ввод: "name,age\nJohn,30\nJane,25" → Вывод: [{"name":"John","age":"30"}, {"name":"Jane","age":"25"}]
  Ввод: "id\n1" → Вывод: [{"id":"1"}]
  Ввод: "" → Вывод: []
"""
def csv_to_dicts():
    pass


"""
60. Калькулятор выражений
Описание: Вычислить результат математического выражения (только +-*/).
Примеры:
  Ввод: "2+3*4" → Вывод: 14
  Ввод: "(10-5)/2" → Вывод: 2.5
  Ввод: "3+2" → Вывод: 5
"""
def expression_calculator():
    pass


"""
61. Генератор HTML тегов
Описание: Сгенерировать HTML тег с содержимым и атрибутами.
Примеры:
  Ввод: "div", "Hello", {"class":"header"} → Вывод: "<div class='header'>Hello</div>"
  Ввод: "p", "Text" → Вывод: "<p>Text</p>"
  Ввод: "br", "", None → Вывод: "<br/>"
"""
def html_tag_generator():
    pass


"""
62. Фильтрация HTML тегов
Описание: Удалить все HTML теги из строки.
Примеры:
  Ввод: "<div>Hello</div>" → Вывод: "Hello"
  Ввод: "<p>Text</p><br/>" → Вывод: "Text"
  Ввод: "No tags" → Вывод: "No tags"
"""
def remove_html_tags():
    pass


"""
63. Сортировка чисел по цифрам
Описание: Отсортировать числа по сумме их цифр.
Примеры:
  Ввод: [11, 23, 111] → Вывод: [11, 23, 111] (суммы: 2, 5, 3)
  Ввод: [123, 45, 6] → Вывод: [6, 45, 123] (суммы: 6, 9, 6)
  Ввод: [0] → Вывод: [0]
"""
def sort_by_digit_sum():
    pass


"""
64. Генератор арифметической прогрессии
Описание: Сгенерировать список чисел арифметической прогрессии.
Примеры:
  Ввод: 0, 5, 3 → Вывод: [0, 5, 10, 15]
  Ввод: 1, 1, 5 → Вывод: [1, 2, 3, 4, 5, 6]
  Ввод: 10, -2, 4 → Вывод: [10, 8, 6, 4, 2]
"""
def arithmetic_sequence():
    pass


"""
65. Генератор геометрической прогрессии
Описание: Сгенерировать список чисел геометрической прогрессии.
Примеры:
  Ввод: 1, 2, 5 → Вывод: [1, 2, 4, 8, 16, 32]
  Ввод: 3, 3, 3 → Вывод: [3, 9, 27, 81]
  Ввод: 100, 0.5, 4 → Вывод: [100, 50, 25, 12.5, 6.25]
"""
def geometric_sequence():
    pass


"""
66. Поиск НОД
Описание: Найти наибольший общий делитель двух чисел.
Примеры:
  Ввод: 54, 24 → Вывод: 6
  Ввод: 17, 13 → Вывод: 1
  Ввод: 0, 5 → Вывод: 5
"""
def find_gcd():
    pass


"""
67. Поиск НОК
Описание: Найти наименьшее общее кратное двух чисел.
Примеры:
  Ввод: 4, 6 → Вывод: 12
  Ввод: 5, 7 → Вывод: 35
  Ввод: 0, 1 → Вывод: 0
"""
def find_lcm():
    pass


"""
68. Разложение на простые множители
Описание: Разложить число на простые множители.
Примеры:
  Ввод: 12 → Вывод: [2, 2, 3]
  Ввод: 17 → Вывод: [17]
  Ввод: 100 → Вывод: [2, 2, 5, 5]
"""
def prime_factors():
    pass


"""
69. Конвертер в двоичную систему
Описание: Преобразовать число в двоичную строку (без ведущих нулей).
Примеры:
  Ввод: 5 → Вывод: "101"
  Ввод: 0 → Вывод: "0"
  Ввод: 16 → Вывод: "10000"
"""
def to_binary():
    pass


"""
70. Конвертер из двоичной системы
Описание: Преобразовать двоичную строку в число.
Примеры:
  Ввод: "101" → Вывод: 5
  Ввод: "0" → Вывод: 0
  Ввод: "10000" → Вывод: 16
"""
def from_binary():
    pass


"""
71. Генератор случайного UUID
Описание: Сгенерировать случайный UUID (версии 4).
Примеры:
  Вывод: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
  Вывод: "550e8400-e29b-41d4-a716-446655440000"
  Вывод: "123e4567-e89b-12d3-a456-426614174000"
"""
def generate_uuid():
    pass


"""
72. Валидатор номера телефона
Описание: Проверить, соответствует ли строка формату номера телефона (+7XXXXXXXXXX).
Примеры:
  Ввод: "+79123456789" → Вывод: True
  Ввод: "1234567890" → Вывод: False
  Ввод: "+7(123)456-78-90" → Вывод: False
"""
def validate_phone():
    pass


"""
73. Нормализатор номера телефона
Описание: Привести номер телефона к формату +7XXXXXXXXXX.
Примеры:
  Ввод: "8 (912) 345-67-89" → Вывод: "+79123456789"
  Ввод: "+7 123 456 78 90" → Вывод: "+71234567890"
  Ввод: "123-45-67" → Вывод: None (невалидный)
"""
def normalize_phone():
    pass


"""
74. Парсер URL
Описание: Разобрать URL на компоненты (протокол, домен, путь, параметры).
Примеры:
  Ввод: "https://example.com/path?param=value" → Вывод: {"protocol":"https", "domain":"example.com", "path":"/path", "params":"param=value"}
  Ввод: "http://site.ru" → Вывод: {"protocol":"http", "domain":"site.ru", "path":"", "params":None}
  Ввод: "invalid.url" → Вывод: None
"""
def parse_url():
    pass