
# Урок 27: Введение в ООП (Объектно-Ориентированное Программирование)

# 1. Что такое ООП (Объектно-Ориентированное Программирование)?
# ООП — это методология программирования, основанная на концепции объектов и классов.
# Классы представляют собой шаблоны для создания объектов.
# Объекты — это экземпляры классов, которые содержат данные (атрибуты) и методы для работы с этими данными.

# Пример:
class Person:
    """Класс, описывающий человека."""
    def __init__(self, name, age):
        # конструктор: инициализирует атрибуты
        self.name = name      # атрибут экземпляра
        self.age = age
        # print("method init called!")

    def greet(self):
        # метод экземпляра
        print(f"Привет, меня зовут {self.name}, мне {self.age} лет.")

# создание объекта
p = Person("Алиса", 30)

# p.greet()  # Привет, меня зовут Алиса, мне 30 лет.


# 2. Основные элементы ООП:
# Классы и объекты:
# Класс — это как шаблон для объектов.
# Объект — это экземпляр класса.

# Пример:

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} makes a sound."

animal1 = Animal("Dog")
# print(animal1.speak())  # Output: Dog makes a sound.


# Конструктор __init__():
# Метод __init__ используется для инициализации объекта с атрибутами, которые он будет содержать.

# Пример:

class Car:
    def __init__(self, make, model, wheels=4):
        self.wheels = wheels
        self.make = make
        self.model = model

my_car = Car("Toyota", "Corolla")
# print(my_car.make, my_car.model, my_car.wheels)  # Output: Toyota Corolla


# 3. Методы и атрибуты:
# Атрибуты — это переменные, которые хранят информацию о объекте.
# Методы — это функции, которые выполняют операции с атрибутами объекта.

# Пример:

class Dog:
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def bark(self):
        return f"{self.name} barks!"

dog1 = Dog("Buddy", "Golden Retriever")
# print(dog1.bark())  # Output: Buddy barks!


# 4. Подведение итогов:
# ООП является мощной концепцией, которая позволяет создавать гибкие и масштабируемые программы.
# В ООП важны классы и объекты как основные элементы. 
# В следующем уроке мы подробно рассмотрим инкапсуляцию, полиморфизм, наследование и абстракцию в ООП.

# Домашнее задание (Задачи для практики):
# 1. Создайте класс Car, который имеет атрибуты make (марка автомобиля), model (модель) и year (год выпуска).
# Добавьте метод get_car_info(), который выводит информацию о машине.


# 2. Создайте класс Circle, который имеет атрибут radius (радиус).
# Добавьте методы для вычисления площади и периметра круга.


# 3. Создайте класс Rectangle, который имеет атрибуты width (ширина) и height (высота).
# Добавьте метод для вычисления площади прямоугольника.

# 4. Реализуйте полиморфизм, создав классы Bird и Fish, которые переопределяют метод move(),
# в котором будет описан способ передвижения (полет и плавание соответственно).

# 5. Создайте класс Person с атрибутами name и age. Реализуйте метод greet(), который будет возвращать приветствие.


# ДЗ


# 1. **Класс «Круг»**
#    Создайте класс `Circle` с публичным атрибутом `radius` (радиус). Добавьте метод `area()`, возвращающий площадь круга (`π * radius**2`), и метод `circumference()`, возвращающий длину окружности (`2 * π * radius`).
#
# 2. **Класс «Студент»**
#    Определите класс `Student` с атрибутами `name` (имя) и `grades` (список оценок). Реализуйте методы:
#
#    * `add_grade(grade)` — добавить оценку в список;
#    * `average()` — вычислить и вернуть среднее арифметическое всех оценок.
#
# 3. **Класс «Вектор 2D»**
#    Напишите класс `Vector2D` с атрибутами `x` и `y`. Реализуйте «магические» методы:
#
#    * `__add__(other)` для сложения двух векторов;
#    * `__sub__(other)` для вычитания;
#    * `__repr__()` для удобного строкового представления.
#
# 4. **Класс «Книга»**
#    Создайте класс `Book` с атрибутами `title`, `author` и `pages` (кол-во страниц). Добавьте метод `description()`, возвращающий строку:
#
#    ```
#    "<title> — автор <author>, <pages> стр."
#    ```
#
# 5. **Класс «Точка»**
#    Определите класс `Point` с координатами `x` и `y`. Добавьте метод `distance_to_origin()`, возвращающий расстояние от точки до начала координат, и метод `distance_to(other)`, возвращающий расстояние до другой точки.
#
# 6. **Класс «Конвертер температур»**
#    Напишите класс `TemperatureConverter` с двумя статическими методами (без использования `@classmethod`):
#
#    * `c_to_f(celsius)` — перевод из °C в °F;
#    * `f_to_c(fahrenheit)` — перевод из °F в °C.
#
# 7. **Класс «Матрица 2×2»**
#    Создайте класс `Matrix2x2`, хранящий четыре числа `a, b, c, d`. Реализуйте методы:
#
#    * `determinant()` — вычисление определителя;
#    * `__mul__(other)` — умножение двух матриц 2×2.
#
# 8. **Класс «Список покупок»**
#    Определите класс `ShoppingList` с атрибутом `items` (список строк). Реализуйте методы:
#
#    * `add(item)` — добавить товар;
#    * `remove(item)` — удалить товар по имени (если есть);
#    * `show()` — вывести все товары в виде нумерованного списка.
#
# 9. **Класс «Комплексное число»**
#    Напишите класс `ComplexNumber` с атрибутами `real` и `imag`. Реализуйте методы:
#
#    * `__add__(other)` и `__mul__(other)` для сложения и умножения комплексных чисел;
#    * `__repr__()` для отображения в формате `"a + bi"` или `"a - bi"`.
#
# 10. **Класс «Счётчик»**
#     Создайте класс `Counter` с атрибутом `value`, инициализируемым в конструкторе. Добавьте методы:
#
#     * `increment()` — увеличить на 1;
#     * `decrement()` — уменьшить на 1;
#     * `reset()` — обнулить;
#     * `__repr__()` — вернуть текущее значение в виде строки.
