Часть 1: Введение в терминал
Что такое терминал?
Терминал — это текстовый интерфейс для взаимодействия с операционной системой. Через терминал можно выполнять различные действия, такие как работа с файлами и папками, запуск программ, управление процессами и многое другое.

Терминал в macOS и Windows
macOS:

В macOS терминал называется Terminal. Это приложение, которое можно найти в папке Applications > Utilities или использовать через поиск Spotlight (Cmd + Space, затем введите "Terminal").

Windows:

В Windows можно использовать Command Prompt (CMD) или PowerShell. PowerShell более функционален, но для базовых команд можно использовать CMD.

Чтобы открыть CMD, нажмите Win + R, введите cmd и нажмите Enter.

Для PowerShell используйте команду Win + X, затем выберите Windows PowerShell.

Работа с документацией команд (man)
В терминале можно получать подробную информацию о командах с помощью man (manual). Это справочник по командам и их параметрам.

Пример:
Чтобы получить документацию по команде ls, выполните:

man ls  # Покажет руководство по команде ls
Для навигации по страницам используйте клавиши:

Space — перейти на следующую страницу.

b — вернуться на предыдущую страницу.

q — выйти из мануала.

Пример для Windows (эквивалент):
В Windows нет прямого аналога man, но можно использовать help для получения справочной информации по большинству команд:

help dir  # Покажет справку по команде dir
Для получения справки по PowerShell команде:

Get-Help Get-Command  # Получит справку по командлету Get-Command


Часть 2: Основные команды терминала
1. Навигация по файловой системе
macOS:

cd — Change Directory: Переход в другую директорию.

cd /Users/username/Documents  # Переход в папку Documents
ls — List: Список файлов и папок в текущей директории.

ls  # Покажет файлы в текущей директории
ls -l  # Покажет подробную информацию о файлах
ls -a  # Покажет все файлы, включая скрытые
pwd — Print Working Directory: Покажет полный путь текущей директории.

pwd  # Покажет путь к текущей директории

Windows:

cd — Переход в другую директорию (аналогично macOS).

cd C:\Users\Username\Documents  # Переход в папку Documents
dir — Список файлов и папок в текущей директории.

dir  # Покажет файлы в текущей директории
echo %cd% — Покажет полный путь текущей директории.

echo %cd%  # Покажет путь к текущей директории

Переход по папкам в терминале
1. Переход вверх на уровень (..)
macOS:
Для перехода в родительский каталог используйте команду cd ...

cd ..  # Переход на уровень выше
Windows:
В Windows для перехода в родительскую папку используйте аналогичную команду:

cd ..  # Переход на уровень выше
2. Переход в домашнюю директорию (~)
macOS:
Для перехода в домашнюю директорию используйте команду:

cd ~  # Переход в домашнюю директорию
cd    # Тоже переход в домашнюю директорию
Windows:
В Windows можно использовать:

cd %USERPROFILE%  # Переход в домашнюю директорию
3. Переход в корневую директорию (/ или C:)
macOS:
Для перехода в корневую директорию используйте:

cd /  # Переход в корневую директорию
Windows:
В Windows переход в корневую директорию диска C::

cd C:\  # Переход в корень диска C:

4. Переход на несколько уровней назад
macOS:
Чтобы перейти на несколько уровней вверх, используйте несколько ..:

cd ../../  # Переход на два уровня выше
Windows:
В Windows аналогично:

cd ..\..\  # Переход на два уровня выше

2. Создание и удаление файлов и директорий
macOS:

touch — Создаёт пустой файл.

touch newfile.txt  # Создаёт новый файл newfile.txt
mkdir — Создаёт новую папку.

mkdir new_folder  # Создаёт новую папку new_folder
rm — Удаляет файл.

rm newfile.txt  # Удаляет файл newfile.txt
rm -r — Удаляет папку и её содержимое.

rm -r new_folder  # Удаляет папку new_folder и все её файлы

Windows:

type nul > newfile.txt — Создаёт пустой файл.

type nul > newfile.txt  # Создаёт новый файл newfile.txt
mkdir — Создаёт новую папку.

mkdir new_folder  # Создаёт новую папку new_folder
del — Удаляет файл.

del newfile.txt  # Удаляет файл newfile.txt
rmdir /s /q — Удаляет папку и её содержимое.

rmdir /s /q new_folder  # Удаляет папку new_folder и все её файлы

3. Копирование и перемещение файлов
macOS:

cp — Копирование файлов.

cp file1.txt file2.txt  # Копирует файл file1.txt в файл file2.txt
mv — Перемещение или переименование файлов.

mv file1.txt file2.txt  # Переименовывает file1.txt в file2.txt
mv file1.txt /Users/username/OtherFolder  # Перемещает file1.txt в папку OtherFolder

Windows:

copy — Копирование файлов.

copy file1.txt file2.txt  # Копирует файл file1.txt в файл file2.txt
move — Перемещение или переименование файлов.

move file1.txt file2.txt  # Переименовывает file1.txt в file2.txt
move file1.txt C:\Users\Username\OtherFolder  # Перемещает file1.txt в папку OtherFolder

Часть 3: Работа с процессами
1. Просмотр процессов
macOS:

ps — Показать процессы, запущенные в текущем сеансе.

ps  # Покажет процессы текущего пользователя
ps aux  # Покажет все процессы

Windows:

tasklist — Показывает список запущенных процессов.

tasklist  # Покажет все процессы в системе

2. Завершение процессов
macOS:

kill — Завершение процесса по его ID.

kill 1234  # Завершит процесс с ID 1234

Windows:

taskkill — Завершение процесса по его ID.

taskkill /PID 1234  # Завершит процесс с ID 1234

Часть 4: Права доступа и владельцы файлов
1. Права доступа к файлам
macOS:

chmod — Изменение прав доступа.

chmod +x script.sh  # Добавляет права на выполнение файлу script.sh

Windows:

В Windows права доступа на файлы и папки можно изменить через Проводник, либо с помощью icacls.

icacls "C:\path\to\file" /grant Username:F  # Дает полные права пользователю

Права доступа (chmod)
Команда chmod используется для изменения прав доступа к файлам и папкам. Права доступа могут быть выражены в символьной или цифровой форме. В цифровой форме используются три цифры, каждая из которых соответствует правам для пользователя (owner), группы (group) и других пользователей (others).

Цифровые права доступа
Каждое право (чтение, запись, выполнение) представляется цифрой:

Чтение (r) = 4

Запись (w) = 2

Исполнение (x) = 1

Эти цифры суммируются. Например:

7 = чтение (4) + запись (2) + исполнение (1) → полный доступ

6 = чтение (4) + запись (2) → права на чтение и запись

5 = чтение (4) + исполнение (1) → права на чтение и выполнение

4 = только чтение

3 = запись (2) + исполнение (1) → права на запись и выполнение

2 = только запись

1 = только выполнение

Пример использования:
chmod 777 file.txt  # Полный доступ для владельца, группы и остальных
chmod 755 file.txt  # Чтение, запись и выполнение для владельца, чтение и выполнение для группы и остальных
chmod 644 file.txt  # Чтение и запись для владельца, только чтение для группы и остальных
Пример: chmod 777 file.txt

7 для владельца — полный доступ (чтение, запись, выполнение).

7 для группы — полный доступ.

7 для остальных пользователей — полный доступ.

Важно: Использование chmod 777 дает полный доступ к файлу для всех пользователей, что может представлять угрозу безопасности. Лучше использовать более строгие права доступа.


Изменение владельца файла (chown)
Команда chown используется для изменения владельца и группы файла или директории.

Синтаксис:
chown [новый_владелец]:[новая_группа] файл

Пример:
Изменение владельца файла file.txt на пользователя user и группу на group:

chown user:group file.txt  # Устанавливает владельцем пользователя 'user', а группой 'group'
Изменение только владельца:

chown user file.txt  # Устанавливает владельцем 'user', группа остается прежней
Изменение только группы:

chown :group file.txt  # Устанавливает группу 'group', владелец остается прежним


Поиск файлов (find)
Команда find позволяет искать файлы и каталоги на основе различных критериев, таких как имя, размер, дата изменения и другие.

Пример:
Поиск файлов с расширением .txt в текущей директории и подкаталогах:

find . -name "*.txt"  # Ищет все файлы .txt в текущей директории и подкаталогах
Поиск файлов, изменённых за последние 7 дней:

find . -mtime -7  # Ищет файлы, изменённые за последние 7 дней
Поиск файлов по размеру:

find . -size +1M  # Ищет файлы, размер которых больше 1 мегабайта

Для Windows:
В Windows аналог команды find — это dir, который позволяет искать файлы в директории:

dir *.txt /s  # Ищет все .txt файлы в текущей директории и подкаталогах


Поиск по содержимому файлов (grep)
Команда grep используется для поиска строк в файлах, которые соответствуют заданному шаблону (регулярному выражению).

Пример:
Поиск всех строк в файле file.txt, содержащих слово "error":

grep "error" file.txt  # Ищет слово "error" в файле file.txt
Поиск с игнорированием регистра:

grep -i "error" file.txt  # Ищет слово "error" без учёта регистра
Поиск в нескольких файлах:

grep "error" *.log  # Ищет слово "error" во всех файлах с расширением .log
Вывод строк с номерами:

grep -n "error" file.txt  # Покажет строки с номерами, содержащие слово "error"

Для Windows:
В Windows эквивалент grep — это команда findstr:

findstr "error" file.txt  # Ищет слово "error" в файле


Просмотр процессов (top)
Команда top показывает в реальном времени информацию о процессах, которые работают на вашем компьютере.

Пример:
Запуск команды top:

top  # Покажет информацию о процессах в реальном времени
В top отображаются такие данные, как:

PID (идентификатор процесса)

Пользователь, который запустил процесс

Загрузка процессора и памяти


Домашнее задание (20 задач)
Перейдите в каталог Documents и выведите его содержимое.

Создайте пустой файл file1.txt в домашней директории.

Скопируйте file1.txt в новый файл с именем file1_copy.txt.

Переместите файл file1.txt в другую папку.

Удалите файл file1_copy.txt.

Создайте новую папку projects в домашней директории.

Измените права на файл file1.txt, добавив права на выполнение.

Измените владельца файла file1.txt на другого пользователя.

Найдите все файлы с расширением .txt в директории Documents.

Найдите все строки с текстом "Hello" в файле file1.txt.

Переключитесь в другую директорию и выведите её полный путь.

Создайте файл test.sh, добавьте команду echo "Hello, World!" и выполните её.

Выведите все процессы, которые запущены в вашей системе.

Завершите процесс с ID 1234 (если такой процесс существует).

Найдите все файлы, изменённые за последние 24 часа.

Используйте команду chmod для изменения прав доступа так, чтобы только владелец мог читать и изменять файл.

Используйте команду icacls для предоставления доступа на файл для другого пользователя.

Найдите и выведите все файлы, которые содержат слово "Python".

