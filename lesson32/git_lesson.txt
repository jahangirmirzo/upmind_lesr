
1. Что такое Git?
- Git — это распределённая система контроля версий, созданная Линусом Торвальдсом в 2005 году.
- Используется для отслеживания изменений в коде, совместной работы и откатов.
- Хранит историю каждого изменения.
- Каждый разработчик работает с локальной копией репозитория (не нужна постоянная связь с сервером).

2. Что такое репозиторий?
- Репозиторий — это папка проекта, внутри которой Git отслеживает изменения файлов.
- Содержит:
  - .git/ — служебная папка с всей историей
  - working directory — рабочие файлы
  - staging area — промежуточная зона перед сохранением


3. Установка Git
- https://git-scm.com/downloads
- Команда для проверки:
  git --version

4. Настройка Git (один раз)
git config --global user.name "Ваше имя"
git config --global user.email "ваш@email.com"

Основные команды

5. Инициализация репозитория
git init
Создаёт пустой репозиторий в текущей папке.

6. Статус файлов
git status
Показывает состояние файлов: изменены, неотслеживаемы, готовы к коммиту и т.д.

7. Добавление файлов в индекс (staging area)
git add имя_файла
git add .  # Добавить все изменения

8. Сохранение изменений (коммит)
git commit -m "Комментарий к коммиту"
Сохраняет текущие изменения в истории.

9. Просмотр истории изменений
git log
Выводит список всех коммитов.

Пример:
commit 21d80c2...
Author: Ivan Petrov <ivan@example.com>
Date:   Mon Jun 17 12:00:00 2025 +0600

    Добавлена форма регистрации

10. Игнорирование файлов (файл .gitignore)
- Создайте файл .gitignore, добавьте в него:
*.log
.env
node_modules/
Такие файлы не попадут под контроль версий.

11. Работа с удалёнными репозиториями (например, GitHub)
- Привязать удалённый репозиторий:
git remote add origin https://github.com/user/project.git

- Отправить изменения на сервер:
git push -u origin main

- Получить изменения:
git pull origin main

12. Ветки (введение)
- Создать новую ветку:
git checkout -b new-feature

- Переключиться обратно:
git checkout main

- Объединить ветку с основной:
git merge new-feature

Полезные команды

| Команда                       | Назначение                                                  |
| ----------------------------- | ----------------------------------------------------------- |
| `git init`                    | Инициализация нового Git-репозитория в текущей папке        |
| `git clone <url>`             | Склонировать удалённый репозиторий                          |
| `git status`                  | Показать текущий статус файлов (изменены, добавлены и т.д.) |
| `git add <файл>`              | Добавить файл в область подготовки (staging)                |
| `git add .`                   | Добавить все изменения в staging                            |
| `git commit -m "сообщение"`   | Зафиксировать изменения с комментарием                      |
| `git log`                     | Просмотр истории коммитов                                   |
| `git diff`                    | Показать разницу между текущими и предыдущими изменениями   |
| `git branch`                  | Показать список веток                                       |
| `git branch <имя>`            | Создать новую ветку                                         |
| `git checkout <ветка>`        | Переключиться на другую ветку                               |
| `git checkout -b <ветка>`     | Создать и переключиться на новую ветку                      |
| `git merge <ветка>`           | Объединить указанную ветку с текущей                        |
| `git pull`                    | Получить и объединить изменения с удалённого репозитория    |
| `git push`                    | Отправить изменения в удалённый репозиторий                 |
| `git remote add origin <url>` | Привязать удалённый репозиторий                             |
| `git reset <файл>`            | Убрать файл из staging (до коммита)                         |
| `git rm <файл>`               | Удалить файл и зафиксировать удаление                       |
| `git stash`                   | Временно сохранить изменения, не фиксируя их                |
| `git restore <файл>`          | Восстановить файл из последнего коммита                     |
| `git config`                  | Настройка параметров Git (имя, email и др.)                 |



Домашнее задание (15 заданий)

Базовые:
1. Установите Git и настройте имя/почту.
2. Инициализируйте Git в новой папке.
3. Создайте текстовый файл и зафиксируйте его в Git.
4. Посмотрите историю коммитов.
5. Добавьте .gitignore, в котором игнорируется .log файл.

Средние:
6. Создайте несколько коммитов с изменениями одного файла.
7. Используйте git diff для просмотра различий.
8. Попробуйте git reset для отката staging.
9. Клонируйте открытый репозиторий с GitHub.
10. Попробуйте создать и переключиться на ветку.

Сложные:
11. Сделайте merge двух веток.
12. Разрешите конфликт при слиянии (искусственно вызванный).
13. Сделайте push и pull на свой GitHub репозиторий.
14. Реализуйте историю изменений файла README.md.
15. Настройте .gitignore для Python-проекта.

Материалы:
- https://git-scm.com/book/ru/v2
- https://docs.github.com/ru
- https://education.github.com/git-cheat-sheet-education.pdf
